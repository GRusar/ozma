namespace FunWithFlags.FunApp
{
    using System.Linq;
    using Nancy;

    using FunWithFlags.FunCore;

    public class HomeModule : NancyModule
    {
        public HomeModule(DatabaseContext db, UserDatabaseContext userDb)
        {        
            // ! Переписать авторизацию на авторизацию ненси и повесить защиту на остальные запросы
            Get("/", _ =>
            {
                return View["Authorization"];
            });

            Get("/nav", _ =>
            {
                var model = new
                {
                    // ! Создаем модель выгружаем данные по сущностям из базы на основании доступов пользователя к этим сущностям
                    MenuCategories = db.MenuCategories
                                       .GroupJoin(db.Entities,
                                                  category => category.Id,
                                                  entity => entity.MenuCategoryId,
                                                  (category, entities) => new { Category = category, Entities = entities.ToList() })
                                       .ToList()
                    // ! Удаляем пустые менюкатегории (без Сущностей)

                    // ! Если Группа пользователя "Администраторы"
                        // Добавляем в модель захардкоженную меню категорию "Систменые" и системные сущности
                };

                return View["Navigator", model];
            });

            // ! Переписать функционал под ID разных юзервью, сюда же ID сущности и параметры (соритровка 1,2,3)
            Get("/tabl", _ =>
            {
                /*
                Создаем модель меню, берем данные из базы с доступами пользователя к сущности и представлениям
                Если модель не пустая {
                    Создаем модель данных, берем данные из базы с доступами пользователя к записям и фильтрами из юзервью
                    Если модель не пустая {
                        Идем по всем полям сущности {
                            Проверяем доступ пользоваеля к полю {
                                Если нет доступа на чтение поля
                                    Помечаем, что поле не доступно для чтения (При выводе поменяем значения полей на "********")
                            }
                        }
                        Если есть параметр сортировка в ссылке
                            Сортируем по нему
                        Иначе (если параметра сортировка в ссылке нету)
                            Сортируем по дате создания записи - новые наверх
                    }
                } иначе (если модель пустая) {
                    Выводим страницу ошибки "У вас нет досутпа к этим данным"
                }
                

                Запускаем sshtml с выгруженной моделью меню и данных
                */

                var model = new
                {
                    Entries = userDb.Tests.ToArray()
                };

                return View["Table", model];
            });

            // ! Переписать функционал под ID разных форм, ID основного представления, сюда же ID сущности, ID записи
            Get("/form", _ =>
            {
                /*
                Создаем модель меню, берем данные из базы с доступами пользователя к сущности и представлениям
                Если модель не пустая {
                    Создаем модель данных, берем данные из базы с доступами пользователя к сущности и доступами пользователя к записи
                    Если модель не пустая {
                        Идем по всем полям сущности {
                            Проверяем доступ пользоваеля к полю {
                                Если нет доступа на чтение поля
                                    Помечаем, что поле не доступно для чтения (При выводе поменяем значения полей на "********")
                                Если поле недоступно для рекдактирования
                                    Помечаем запись в модели как недоступное для рекдактирования (При выводе сделаем не доступным для редактирования)
                            }
                        }
                    } иначе (если модель пустая) {
                        Выводим страницу ошибки "У вас нет досутпа к этим данным"
                    }
                } иначе (если модель пустая) {
                    Выводим страницу ошибки "У вас нет досутпа к этим данным"
                }

                Запускаем sshtml с выгруженной моделью меню и данных
                */

                return View["Form"];
            });


            // Пример с id

            /*
            Get("/products/{id}", parameters =>
            {
                return $"Hello Bar, id: {parameters.id}";
            });
            */
        }
    }
}
