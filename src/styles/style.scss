$enable-rounded: true;
$enable-shadows: false;
$enable-gradients: false;
$font-family-sans-serif: var(--Font);
$font-family-serif: var(--Font);
$input-color: var(--input-foregroundColor);
$input-placeholder-color: var(--input-foregroundDarkerColor);
$border-color: var(--MainBorderColor);
$input-border-color: var(--input-borderColor, $border-color);

@import '../../node_modules/bootstrap/scss/bootstrap';

/*
 *общие настройки
 *текста
 *отступов (т.к bootstrap их по дефолту выстовляет свои)
 *минимальных размеров и максимальных размеров для удобства выставление собственных размеров
 */
html {
  overflow-x: hidden;
  overflow-y: hidden;
}

* {
  margin: 0;
  min-width: none !important;
  // transition: $color-transition;
}

/*
 *позиционирование боди под наши стили
 *установка размеров боди для наследования и размеров дочерних элементов выставленных в % (чтобы браузер мог их высчитать)
 *overflow:hidden запрещает скролл для удобства пролистывания таблиц и прочего (где нужно можно выставить возможность скрола на самой странице)
 */
body {
  top: 0;
  margin-top: 0;
  margin-bottom: 1px;
  width: 100%;
  height: 100%;
  position: absolute;
  overflow: hidden;
  bottom: 0;
  -webkit-text-size-adjust: none;

  --FocusBorderColor: #{$input-focus-border-color};

  div#app {
    height: 100%;
    display: flex;
    flex-direction: column;
    font-family: var(--Font);
  }
}

/*
 *стили печати
 *запрет браузеру менять цвета при печати
 *отступы для правильного отображения страницы на печатном листе
 */
@media print {
  @page {
    margin: 50px;
  }

  body {
    -webkit-print-color-adjust: exact;
    color-adjust: exact;
    background-color: white !important;
  }

  $sizes: "sm", "md", "lg", "xl";

  @for $i from 1 through 12 {
    @each $size in $sizes {
      .col-#{$size}-#{$i} {
        width: #{percentage(round($i*8.33)/100)} !important;
        max-width: #{percentage(round($i*8.33)/100)} !important;
        float: left;
      }
    }
  }
}

// Works like `no-gutters` for Bootstrap's `.row`.
.sm-gutters {
  margin-left: -5px;
  margin-right: -5px;

  > div[class*="col-"] {
    padding-right: 5px;
    padding-left: 5px;
  }
}

button:not(.btn) {
  border: none;
  outline: none;
}

.input-field,
.textarea-field {
  font-size: var(--FontSize) !important;
}

/* Vue's <transition>s */
@for $i from 1 through 10 {
  .fade-#{$i}-enter-active,
  .fade-#{$i}-leave-active {
    transition: opacity #{$i / 10}s, $color-transition;
  }

  .fade-#{$i}-enter,
  .fade-#{$i}-leave-to {
    opacity: 0;
  }
}

/* Source: https://google.github.io/material-design-icons/ */
.material-icons,
.md-24 { font-size: icon-size(); }
.md-18 { font-size: icon-size(18px); }
.md-36 { font-size: icon-size(36px); }
.md-48 { font-size: icon-size(48px); }

.material-icons {
  user-select: none;
}

.material-button {
  @include material-button;
}

.list-group-item-action {
  padding: 0.25rem;
  display: flex;
  align-items: center;

  .icon {
    line-height: 0;
  }

  .button-caption {
    margin-left: 0 0.25rem;
  }
}

.button-only-icon,
.button-only-caption,
.button-icon-caption {
  @include material-button("button");

  padding: 0.2rem;
  display: flex;
  align-items: center;
}

.button-only-icon,
.button-icon-caption {
  .icon {
    line-height: 0;
  }

  .button-caption {
    margin: 0 0.25rem;
  }
}

.emoji-icon {
  font-size: icon-size();
  line-height: 1;
}

.with-material-icon {
  &.btn,
  &.input-group-text {
    padding: 0 4px !important;
    display: flex !important;
    align-items: center !important;
    border: 1px solid var(--MainBorderColor);
  }

  .material-icons {
    line-height: 0.875rem;
  }
}

input.disabled {
  cursor: not-allowed;

  /* Fixes for Safari */
  opacity: 1;
  -webkit-text-fill-color: var(--input-foregroundColor);
}

input.with-clear-content-button {
  border-right-width: 0;
}

.btn.clear-content-button {
  border-left-width: 0;
  border-right-width: 0;
  border-color: $input-border-color;
  color: var(--input-foregroundDarkerColor, var(--MainTextColorLight));
  opacity: 1;

  .material-icons {
    transition: opacity 0.1s;
  }
}

.input-group {
  .clear-content-button.disabled .material-icons {
    opacity: 0;
  }

  .clear-content-button:not(.disabled) .material-icons {
    opacity: 0.5;
  }

  .clear-content-button:not(.disabled):hover {
    background-color: var(--input-backgroundDarker1Color, rgb(239, 239, 239));

    .material-icons {
      opacity: 1;
      color: var(--input-foregroundDarkerColor);
    }
  }

  .clear-content-button:not(.disabled):active {
    background-color: var(--input-backgroundDarker2Color, rgb(239, 239, 239));

    .material-icons {
      color: var(--input-foregroundDarkerColor);
    }
  }
}

$input-focus-border-color: #80bdff;
$input-focus-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);

.form-control:focus {
  box-shadow: $input-focus-shadow;
}

.input-group.focus-entire:focus-within {
  border-color: $input-focus-border-color !important;
  box-shadow: $input-focus-shadow !important;
  border-radius: 0.2rem;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

  .form-control,
  .input-group-prepend .btn,
  .input-group-prepend .input-group-text,
  .input-group-append .btn,
  .input-group-append .input-group-text {
    border-color: $input-focus-border-color !important;
    box-shadow: none;
  }
}

@import "../../node_modules/vue-popperjs/dist/vue-popper.css";

.popper {
  min-width: 100px;
  padding: 0;
  background-color: var(--default-backgroundColor);
  color: var(--default-foregroundColor);

  &[x-placement^="bottom"],
  &[x-placement^="right"],
  &[x-placement^="left"],
  &[x-placement^="top"] {
    margin: 0;
  }
}

.lh-0-5 {
  line-height: 0.5rem;
}

.p-0-5 {
  padding: 0.125rem !important;
}
